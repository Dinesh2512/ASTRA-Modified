import os
import csv

# Path to the directory containing the report folders
original_reports_path = "/home/UFAD/a.chatterjee/Desktop/lab_work/astra/benchmarks/mit_cep_dc_compile_ultra/reports"
astra_reports_path = "/home/UFAD/a.chatterjee/Desktop/lab_work/astra_runs/astra_reuse_inv/reports"

# Initialize an empty dictionary to store the results of the original reports
report_files_dict = {}

# Initialize empty dictionaries to store the reports generated by astra
area_file_dict = {}
power_file_dict = {}
timing_file_dict = {}

def find_last_integer(s):
    # Split the string using underscore as the delimiter
    parts = s.split('_')
    
    # Iterate over the parts in reverse order
    for part in reversed(parts):
        # Try to convert the current part to an integer
        try:
            # If successful, return the integer
            return int(part)
        except ValueError:
            # If it's not an integer, continue to the next part
            continue
    
    # If no integer is found, return None or an appropriate value/sign
    return None

def extract_area(file_path):
    # Open the area report file and print all the lines
    with open(file_path, 'r') as area_report:
        lines = area_report.readlines()
        area_value = lines[-3].split()[3]
        return float(area_value)
    
def extract_power(file_path):
    # Open the power report file and print all the lines
    with open(file_path, 'r') as power_report:
        lines = power_report.readlines()
        power_value = lines[-2].split()[-2]
        return float(power_value)
    
def extract_timing(file_path):
    # Open the timing report file and print all the lines
    with open(file_path, 'r') as timing_report:
        lines = timing_report.readlines()
        timing_value = lines[-6].split()[-1]
        return float(timing_value)

# Walk through each directory in the specified path
for dir_name, subdirs, files in os.walk(original_reports_path):
    for subdir in subdirs:
        # Construct the full path to the subdirectory
        full_subdir_path = os.path.join(dir_name, subdir)
        
        # Initialize file names as None in case they are not found
        area_file = None
        power_file = None
        timing_file = None
        
        # Look for the report files in the subdirectory
        for file in os.listdir(full_subdir_path):
            if file.endswith("_area.rpt"):
                area_file = file
            elif file.endswith("_power.rpt"):
                power_file = file
            elif file.endswith("_timing.rpt"):
                timing_file = file
        
        # Only add to the dictionary if the subdir contains any report files
        if area_file or power_file or timing_file:

            # Full area power and timing file paths
            area_file_path = os.path.join(full_subdir_path, area_file)
            power_file_path = os.path.join(full_subdir_path, power_file)
            timing_file_path = os.path.join(full_subdir_path, timing_file)

            # Open the report files and store the area power and timing values to the dictionary           
            area_value = None
            power_value = None
            timing_value = None
            # Open the area report file and print all the lines
            area_value = extract_area(area_file_path)
            # with open(area_file_path, 'r') as area_report:
            #     lines = area_report.readlines()
            #     area_value = lines[-3].split()[3]

            # Open the power report file and print all the lines
            power_value = extract_power(power_file_path)
            # with open(power_file_path, 'r') as power_report:
            #     lines = power_report.readlines()
            #     power_value = lines[-2].split()[-2]

            # Open the timing report file and print all the lines
            timing_value = extract_timing(timing_file_path)
            # with open(timing_file_path, 'r') as timing_report:
            #     lines = timing_report.readlines()
            #     timing_value = lines[-6].split()[-1]                       


            report_files_dict[subdir] = (area_value, power_value, timing_value)

# Walk through each directory in the astra reports path

for dir_name, subdirs, files in os.walk(astra_reports_path):
    for subdir in subdirs:
        # Construct the full path to the subdirectory
        full_subdir_path = os.path.join(dir_name, subdir)
        
        # Initialize file names as None in case they are not found
        area_file = None
        power_file = None
        timing_file = None

        

        # Look for the report files in the subdirectory
        for file in os.listdir(full_subdir_path):
            if file.endswith("_area.rpt"):
                area_file = file
                area_file_path = os.path.join(full_subdir_path, area_file)               
                area_file_and_path = (area_file, area_file_path)
                area_file_dict[area_file] = area_file_path
            elif file.endswith("_power.rpt"):
                power_file = file
                power_file_path = os.path.join(full_subdir_path, power_file)
                power_file_dict[power_file] = power_file_path
            elif file.endswith("_timing.rpt"):
                timing_file = file
                timing_file_path = os.path.join(full_subdir_path, timing_file)
                timing_file_dict[timing_file] = timing_file_path
                    


# Print the dictionary to check
for key, value in report_files_dict.items():
    print(f"{key}: Area File: {value[0]}, Power File: {value[1]}, Timing File: {value[2]}")

for key, value in area_file_dict.items():
    print(f"{key}: {value}")

for key, value in power_file_dict.items():
    print(f"{key}: {value}")

for key, value in timing_file_dict.items():
    print(f"{key}: {value}")

# Find all of the unique numbers in the area file dictionary and print them in ascending order
unique_numbers = []
for key in area_file_dict.keys():    
    number = find_last_integer(key)
    if number not in unique_numbers:
        unique_numbers.append(number)
unique_numbers.sort()
print(unique_numbers)


area_dict = {}
power_dict = {}
timing_dict = {}

area_overhead_dict = {}
power_overhead_dict = {}
timing_overhead_dict = {}

# Iterate through the original files list
for key, value in report_files_dict.items():
    # Find the area file with the corresponding unique number    
    area_values_dict = {}
    power_values_dict = {}
    timing_values_dict = {}

    area_overhead_values_dict = {}
    power_overhead_values_dict = {}
    timing_overhead_values_dict = {}

    area_values_dict["original"] = value[0]
    power_values_dict["original"] = value[1]
    timing_values_dict["original"] = value[2]

    for number in unique_numbers:
        astra_puf = key + "_" + str(number)        
        astra_puf_area_file = astra_puf + "_area.rpt"
        astra_puf_power_file = astra_puf + "_power.rpt"
        astra_puf_timing_file = astra_puf + "_timing.rpt"

        if astra_puf_area_file in area_file_dict.keys():
            area_file_path = area_file_dict[astra_puf_area_file]
            area_value = extract_area(area_file_path)
            area_values_dict[str(number)] = area_value
            area_overhead_value = (area_value - value[0]) / value[0] * 100
            area_overhead_values_dict[str(number)] = area_overhead_value
        else:            
            area_values_dict[str(number)] = None
            area_overhead_values_dict[str(number)] = None

        if astra_puf_power_file in power_file_dict.keys():
            power_file_path = power_file_dict[astra_puf_power_file]
            power_value = extract_power(power_file_path)
            power_values_dict[str(number)] = power_value
            power_overhead_value = (power_value - value[1]) / value[1] * 100
            power_overhead_values_dict[str(number)] = power_overhead_value
        else:
            power_values_dict[str(number)] = None
            power_overhead_values_dict[str(number)] = None

        if astra_puf_timing_file in timing_file_dict.keys():
            timing_file_path = timing_file_dict[astra_puf_timing_file]
            timing_value = extract_timing(timing_file_path)
            timing_values_dict[str(number)] = timing_value
            timing_overhead_value = (timing_value - value[2]) / value[2] * 100
            timing_overhead_values_dict[str(number)] = timing_overhead_value
        else:
            timing_values_dict[str(number)] = None     
            timing_overhead_values_dict[str(number)] = None

    area_dict[key] = area_values_dict
    power_dict[key] = power_values_dict
    timing_dict[key] = timing_values_dict      

    area_overhead_dict[key] = area_overhead_values_dict
    power_overhead_dict[key] = power_overhead_values_dict
    timing_overhead_dict[key] = timing_overhead_values_dict         



# print out the area values dict
print("Area Dictionary:")
for key, value in area_dict.items():
    print(f"{key}: {value}")

# Print out the area overhead values dict
print("Area Overhead Dictionary:")
for key, value in area_overhead_dict.items():
    print(f"{key}: {value}")

# Print out the power values dict
print("Power Dictionary:")
for key, value in power_dict.items():
    print(f"{key}: {value}")

# Print out the power overhead values dict
print("Power Overhead Dictionary:")
for key, value in power_overhead_dict.items():
    print(f"{key}: {value}")


# Print out the timing values dict
print("Timing Dictionary:")
for key, value in timing_dict.items():
    print(f"{key}: {value}")

# Print out the timing overhead values dict
print("Timing Overhead Dictionary:")
for key, value in timing_overhead_dict.items():
    print(f"{key}: {value}")

# Write the results to a CSV file : 1st Column Design, 2nd Column Original Area, 3rd to nth Column Unique Numbers Area, Unique Numbers Power, Unique Numbers Timing, overheads for Area, Power and Timing

# Create or open the CSV file
csv_file_path = "reports_summary_v2.csv"
with open(csv_file_path, mode='w', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    header = ["Design", "Original Area"]
    for number in unique_numbers:
        header.append(f"Area_{number}")

    header.append("Original Power")
    for number in unique_numbers:
        header.append(f"Power_{number}")

    header.append("Original Timing")
    for number in unique_numbers:
        header.append(f"Timing_{number}")

    for number in unique_numbers:
        header.append(f"Area Overhead_{number} %")

    for number in unique_numbers:
        header.append(f"Power Overhead_{number} %")

    for number in unique_numbers:
        header.append(f"Timing Overhead_{number} %")

    csv_writer.writerow(header)

    # Iterate through the original files list
    for key in report_files_dict.keys():
        row = [key, report_files_dict[key][0]]
        for number in unique_numbers:
            row.append(area_dict[key][str(number)])
        row.append(report_files_dict[key][1])
        for number in unique_numbers:
            row.append(power_dict[key][str(number)])
        row.append(report_files_dict[key][2])
        for number in unique_numbers:
            row.append(timing_dict[key][str(number)])
        for number in unique_numbers:
            row.append(area_overhead_dict[key][str(number)])
        for number in unique_numbers:
            row.append(power_overhead_dict[key][str(number)])
        for number in unique_numbers:
            row.append(timing_overhead_dict[key][str(number)])
        csv_writer.writerow(row)

print(f"Data has been written to {csv_file_path}")

                             
